#include <ESP8266WiFi.h>
#include <ESPAsyncTCP.h>
#include <ESPAsyncWebServer.h>

#include <Servo.h>
#include <iostream>
#include <sstream>



struct MOTOR_PINS {
  int pinEn;
  int pinIN1;
  int pinIN2;
};

std::vector<MOTOR_PINS> motorPins = {
  { 12, 13, 16 },  //RIGHT_MOTOR Pins (EnA, IN1, IN2   D6 D7 D0 )
  { 14, 1, 15 },   //LEFT_MOTOR  Pins (EnB, IN3, IN4   D5 TX D8 )
};

#define UP 1
#define DOWN 2
#define LEFT 3
#define RIGHT 4
#define STOP 0
#define ROTATE 5

#define RIGHT_MOTOR 0
#define LEFT_MOTOR 1

#define FORWARD 1
#define BACKWARD -1


struct ServoPins {
  Servo servo;
  int servoPin;
  String servoName;
  int initialPosition;
};
std::vector<ServoPins> servoPins = {
  { Servo(), 5, "Base", 90 },
  { Servo(), 4, "Shoulder", 0 },
  { Servo(), 0, "Elbow", 0 },
  { Servo(), 2, "Gripper", 0 },    // Gripper should be 90
};
 
struct RecordedStep {
  int servoIndex;
  int value;
  int delayInStep;
};
std::vector<RecordedStep> recordedSteps;

bool recordSteps = false;
bool playRecordedSteps = false;
int car_Speed = 50;

unsigned long previousTimeInMilli = millis();

const char *ssid = "Titans 2.0";                         // TechSrijan'24
const char *password = "12345678";

AsyncWebServer server(80);
AsyncWebSocket wsRobotArmInput("/RobotArmInput");

const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML>
<html>
  <head>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
   <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      .arrows {
        font-size: 40px;
        color: black;
      }

      td.button {
        background-color: rgb(0, 108, 151);
        border-radius: 25%;
        box-shadow: 5px 5px #888888;
      }
      td.buttonMid {
        background-color: rgb(0, 108, 151);
        border-radius: 50%;
        /* box-shadow: 5px 5px #888888; */
      }
      td.button:active {
        transform: translate(5px, 5px);
        box-shadow: none;
      }
      .noselect {
        -webkit-touch-callout: none; /* iOS Safari */
        -webkit-user-select: none; /* Safari */
        -khtml-user-select: none; /* Konqueror HTML */
        -moz-user-select: none; /* Firefox */
        -ms-user-select: none; /* Internet Explorer/Edge */
        user-select: none; /* Non-prefixed version, currently
                                          supported by Chrome and Opera */
      }
      .slidecontainer {
        width: 100%;
      }
      .slider {
        -webkit-appearance: none;
        width: 98%;
        height: 5px;
        border-radius: 5px;
        background: #d3d3d3;
        outline: none;
        opacity: 0.7;
        -webkit-transition: 0.2s;
        transition: opacity 0.2s;
      }
      .slider:hover {
        opacity: 1;
      }

      .slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        background: rgb(0, 108, 151);
        cursor: pointer;
      }
      .slider::-moz-range-thumb {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: red;
        cursor: pointer;
      }

      /* <---------------------------Rob arm control--------------------------------------------> */

      .armSec {
        display: none;
      }

      input[type="button"] {
        background-color: rgba(211, 44, 19, 0.725);
        color: white;
        border-radius: 30px;
        width: 70%;
        height: 30px;
        font-size: 10px;
        text-align: center;
      }

      .noselect {
        -webkit-touch-callout: none; /* iOS Safari */
        -webkit-user-select: none; /* Safari */
        -khtml-user-select: none; /* Konqueror HTML */
        -moz-user-select: none; /* Firefox */
        -ms-user-select: none; /* Internet Explorer/Edge */
        user-select: none; /* Non-prefixed version, currently
                                      supported by Chrome and Opera */
      }
      @media only screen and (min-width: 450px) {
        .mainContainer {
          display: flex;
          justify-content: center;
          align-items: center;
          flex-flow: row-reverse;
        }
        .armSec {
          display: block;
          display: flex;
          align-items: center;
          justify-content: center;
        }
        .header {
          display: none;
        }
      }
    </style>

    /* <---------------------------------------- HTML code of
    the-------------------------------------------------> */
  </head>
  <body class="noselect" align="center" style="background-color: black">
    <div class="header" style="height: 150px; margin-top: 50px; width: 100%">
      <h1 style="color: rgb(0, 94, 128); margin-bottom: 35px; margin-top: 20px">
        <u>R O B O K R I T I</u>
      </h1>
      <div class="headingButton" style="justify-content: center; display: flex">
        <p
          id="A"
          style="
            width: 30px;
            padding: 4px;
            border-radius: 50% 0 0 50%;
            background-color: #888888;
          "
          onclick="toggler(this)"
        >
          A
        </p>
        <p
          id="C"
          style="
            width: 30px;
            padding: 4px;
            border-radius: 0 50% 50% 0;
            background-color: rgb(0, 108, 151);
          "
          onclick="toggler(this)"
        >
          C
        </p>
      </div>
    </div>
    <div class="mainContainer">
      <div class="carSec" id="carSec">
        <table
          id="mainTable"
          style="width: 300px; margin: auto; table-layout: fixed"
          cellspacing="10"
        >
          <tr>
            <td></td>
            <td
              class="button"
              ontouchstart='sendButtonInput("MoveCar","1")'
              ontouchend='sendButtonInput("MoveCar","0")'
            >
              <span class="arrows">&#8679;</span>
            </td>
            <td></td>
          </tr>
          <tr>
            <td
              class="button"
              ontouchstart='sendButtonInput("MoveCar","3")'
              ontouchend='sendButtonInput("MoveCar","0")'
            >
              <span class="arrows">&#8678;</span>
            </td>
            <td class="buttonMid arrows"
            ontouchstart='sendButtonInput("MoveCar","5")'
              ontouchend='sendButtonInput("MoveCar","0")'>
              <span
                
                >&#8635;</span
              >
            </td>
            <td
              class="button"
              ontouchstart='sendButtonInput("MoveCar","4")'
              ontouchend='sendButtonInput("MoveCar","0")'
            >
              <span class="arrows">&#8680;</span>
            </td>
          </tr>
          <tr>
            <td></td>
            <td
              class="button"
              ontouchstart='sendButtonInput("MoveCar","2")'
              ontouchend='sendButtonInput("MoveCar","0")'
            >
              <span class="arrows">&#8681;</span>
            </td>
            <td></td>
          </tr>
          <tr />
          <tr />
          <tr />
          <tr />
          <tr />
          <tr />
          <tr>
            <td style="text-align: left; font-size: 25px; color: beige">
              <b>Speed:</b>
            </td>
            <td colspan="2">
              <div class="slidecontainer">
                <input
                  type="range"
                  min="0"
                  max="255"
                  value="50"
                  class="slider"
                  id="Speed"
                  oninput='sendButtonInput("Speed",value)'
                />
              </div>
            </td>
          </tr>
        </table>
      </div>

      <!-- <--------------------------------Robotic Arm Control-------------------------------------------------------->

      <div class="armSec" id="armSec">
        <table
          id="mainTable"
          style="
            width: 350px;
            margin: auto;
            table-layout: fixed;
            padding: 0 25px;
          "
          cellspacing="10"
        >
          <tr />
          <tr />
          <tr />
          <tr />
          <tr>
            <td></td>
            <td style="text-align: center; font-size: 20px; color: beige">
              <b>Gripper:</b>
            </td>
            </tr>
            <tr>
            <td colspan="3">
              <div class="slidecontainer">
                <input
                  type="range"
                  min="0"
                  max="90"
                  value="0"
                  class="slider"
                  id="Gripper"
                  oninput='sendButtonInput("Gripper",value)'
                />
              </div>
            </td>
          </tr>
          <tr />
          <tr />
          <tr>
            <td></td>
            <td style="text-align: center; font-size: 20px; color: beige">
              <b>Elbow:</b>
            </td>
            </tr>
            <tr>
            <td colspan="3">
              <div class="slidecontainer">
                <input
                  type="range"
                  min="0"
                  max="90"
                  value="0"
                  class="slider"
                  id="Elbow"
                  oninput='sendButtonInput("Elbow",value)'
                />
              </div>
            </td>
          </tr>
          <tr />
          <tr />
          <tr>
            <td></td>
            <td style="text-align: center; font-size: 20px; color: beige">
              <b>Shoulder:</b>
            </td>
            </tr>
            <tr>
            <td colspan="3">
              <div class="slidecontainer">
                <input
                  type="range"
                  min="0"
                  max="90"
                  value="0"
                  class="slider"
                  id="Shoulder"
                  oninput='sendButtonInput("Shoulder",value)'
                />
              </div>
            </td>
          </tr>
          <tr />
          <tr />
          <tr>
            <td></td>
            <td style="text-align: center; font-size: 20px; color: beige">
              <b>Base:</b>
            </td>
            </tr>
            <tr>
            <td colspan="3">
              <div class="slidecontainer">
                <input
                  type="range"
                  min="0"
                  max="180"
                  value="90"
                  class="slider"
                  id="Base"
                  oninput='sendButtonInput("Base",value)'
                />
              </div>
            </td>
          </tr>
          <tr />
          <tr />
          <tr>
            <td style="text-align: left; font-size: 25px; color: beige;display: none;">
              <b>Record:</b>
            </td>
            <td style="display: none;">
              <input
                type="button"
                id="Record"
                value="OFF"
                ontouchend="onclickButton(this)"
              />
            </td>
            <td></td>
          </tr>
          <tr />
          <tr />
          <tr>
            <td style="text-align: left; font-size: 25px; color: beige;display: none;">
              <b>Play:</b>
            </td>
            <td style="display: none;">
              <input
                type="button"
                id="Play"
                value="OFF"
                ontouchend="onclickButton(this)"
              />
            </td>
            <td></td>
          </tr>
        </table>
      </div>
    </div>

    <script>
      function toggler(toggleId) {
        if (toggleId.id == "A") {
          document.getElementById("carSec").style.display = "none";
          document.getElementById("armSec").style.display = "block";
          document.getElementById("A").style.backgroundColor =
            "rgb(0, 108, 151)";
          document.getElementById("C").style.backgroundColor = "grey";
        } else {
          document.getElementById("armSec").style.display = "none";
          document.getElementById("carSec").style.display = "block";
          document.getElementById("C").style.backgroundColor =
            "rgb(0, 108, 151)";
          document.getElementById("A").style.backgroundColor = "grey";
        }
      }
  
      var webSocketRobotArmInputUrl = ws://${window.location.hostname}/RobotArmInput;    
      var websocketRobotArmInput;

      
      function initRobotArmInputWebSocket() 
      {
        websocketRobotArmInput = new WebSocket(webSocketRobotArmInputUrl);
        websocketRobotArmInput.onopen    = function(event){
          var speedButton = document.getElementById("Speed");
          sendButtonInput("Speed", speedButton.value);
        };
        websocketRobotArmInput.onclose   = function(event){setTimeout(initRobotArmInputWebSocket, 2000);};
        websocketRobotArmInput.onmessage    = function(event)
        {
          var keyValue = event.data.split(",");
          var button = document.getElementById(keyValue[0]);
          button.value = keyValue[1];
          if (button.id == "Record" || button.id == "Play")
          {
            button.style.backgroundColor = (button.value == "ON" ? "green" : "red");  
            enableDisableButtonsSliders(button);
          }
        };
      }
      
      function sendButtonInput(key, value) 
      {
        var data = key + "," + value;
        websocketRobotArmInput.send(data);
      }
      
      function onclickButton(button) 
      {
        button.value = (button.value == "ON") ? "OFF" : "ON" ;        
        button.style.backgroundColor = (button.value == "ON" ? "green" : "red");          
        var value = (button.value == "ON") ? 1 : 0 ;
        sendButtonInput(button.id, value);
        enableDisableButtonsSliders(button);
      }
      
      function enableDisableButtonsSliders(button)
      {
        if(button.id == "Play")
        {
          var disabled = "auto";
          if (button.value == "ON")
          {
            disabled = "none";            
          }
          document.getElementById("Gripper").style.pointerEvents = disabled;
          document.getElementById("Elbow").style.pointerEvents = disabled;          
          document.getElementById("Shoulder").style.pointerEvents = disabled;          
          document.getElementById("Base").style.pointerEvents = disabled; 
          document.getElementById("Record").style.pointerEvents = disabled;
          document.getElementById("C").style.pointerEvents = disabled;
        }
        if(button.id == "Record")
        {
          var disabled = "auto";
          if (button.value == "ON")
          {
            disabled = "none";            
          }
          document.getElementById("Play").style.pointerEvents = disabled;
        }        
      }
           
      window.onload = initRobotArmInputWebSocket;
      document.getElementById("mainTable").addEventListener("touchend", function(event){
        event.preventDefault()
      }); 


    </script>
  </body>    
</html>
)rawliteral";




void handleRoot(AsyncWebServerRequest *request) {
  request->send_P(200, "text/html", index_html);
}

void handleNotFound(AsyncWebServerRequest *request) {
  request->send(404, "text/plain", "File Not Found");
}

void onRobotArmInputWebSocketEvent(AsyncWebSocket *server,
                                   AsyncWebSocketClient *client,
                                   AwsEventType type,
                                   void *arg,
                                   uint8_t *data,
                                   size_t len) {
  switch (type) {
    case WS_EVT_CONNECT:
      Serial.printf("WebSocket client #%u connected from %s\n", client->id(), client->remoteIP().toString().c_str());
      sendCurrentRobotArmState();
      break;
    case WS_EVT_DISCONNECT:
      moveCar(STOP);
      Serial.printf("WebSocket client #%u disconnected\n", client->id());
      break;
    case WS_EVT_DATA:
      AwsFrameInfo *info;
      info = (AwsFrameInfo *)arg;
      if (info->final && info->index == 0 && info->len == len && info->opcode == WS_TEXT) {
        std::string myData = "";
        myData.assign((char *)data, len);
        std::istringstream ss(myData);
        std::string key, value;
        std::getline(ss, key, ',');
        std::getline(ss, value, ',');
        Serial.printf("Key [%s] Value[%s]\n", key.c_str(), value.c_str());
        int valueInt = atoi(value.c_str());

        if (key == "Record") {
          recordSteps = valueInt;
          if (recordSteps) {
            recordedSteps.clear();
            previousTimeInMilli = millis();
          }
        } else if (key == "Play") {
          playRecordedSteps = valueInt;
        } else if (key == "Base") {
          writeServoValues(0, valueInt);
        } else if (key == "Shoulder") {
          writeServoValues(1, valueInt);
        } else if (key == "Elbow") {
          writeServoValues(2, valueInt);
        } else if (key == "Gripper") {
          writeServoValues(3, valueInt);
        } else if (key == "MoveCar") {
          moveCar(valueInt);
        } else if (key == "Speed") {
          car_Speed = valueInt;
        }
      }
      break;
    case WS_EVT_PONG:
    case WS_EVT_ERROR:
      break;
    default:
      break;
  }
}

void rotateMotor(int motorNumber, int motorDirection) {
  if (motorDirection == FORWARD) {
    digitalWrite(motorPins[motorNumber].pinIN1, HIGH);
    digitalWrite(motorPins[motorNumber].pinIN2, LOW);
  } else if (motorDirection == BACKWARD) {
    digitalWrite(motorPins[motorNumber].pinIN1, LOW);
    digitalWrite(motorPins[motorNumber].pinIN2, HIGH);
  } else {
    digitalWrite(motorPins[motorNumber].pinIN1, LOW);
    digitalWrite(motorPins[motorNumber].pinIN2, LOW);
  }
}

void setSpeed() {
analogWrite(14, car_Speed);
      analogWrite(12, car_Speed);
}

void moveCar(int inputValue)

{
  Serial.printf("Got value as %d\n", inputValue);
  switch (inputValue) {

    case UP:
      setSpeed();
      rotateMotor(RIGHT_MOTOR, FORWARD);
      rotateMotor(LEFT_MOTOR, FORWARD);
      break;

    case DOWN:
      setSpeed();
      rotateMotor(RIGHT_MOTOR, BACKWARD);
      rotateMotor(LEFT_MOTOR, BACKWARD);
      break;

    case LEFT:
      setSpeed();
      rotateMotor(RIGHT_MOTOR, FORWARD);
      rotateMotor(LEFT_MOTOR, BACKWARD);
      break;

    case RIGHT:
     setSpeed();
      rotateMotor(RIGHT_MOTOR, BACKWARD);
      rotateMotor(LEFT_MOTOR, FORWARD);
      break;

    case ROTATE:
      analogWrite(14, 170);
      analogWrite(12, 80);
      rotateMotor(RIGHT_MOTOR, FORWARD);
      rotateMotor(LEFT_MOTOR, FORWARD);
      break;


    case STOP:
      rotateMotor(RIGHT_MOTOR, STOP);
      rotateMotor(LEFT_MOTOR, STOP);
      break;

    default:
      rotateMotor(RIGHT_MOTOR, STOP);
      rotateMotor(LEFT_MOTOR, STOP);
      break;
  }
}

void sendCurrentRobotArmState() {
  for (int i = 0; i < servoPins.size(); i++) {
    wsRobotArmInput.textAll(servoPins[i].servoName + "," + servoPins[i].servo.read());
  }
  wsRobotArmInput.textAll(String("Record,") + (recordSteps ? "ON" : "OFF"));
  wsRobotArmInput.textAll(String("Play,") + (playRecordedSteps ? "ON" : "OFF"));
}

void writeServoValues(int servoIndex, int value) {
  if (recordSteps) {
    RecordedStep recordedStep;
    if (recordedSteps.size() == 0)  // We will first record initial position of all servos.
    {
      for (int i = 0; i < servoPins.size(); i++) {
        recordedStep.servoIndex = i;
        recordedStep.value = servoPins[i].servo.read();
        recordedStep.delayInStep = 0;
        recordedSteps.push_back(recordedStep);
      }
    }
    unsigned long currentTime = millis();
    recordedStep.servoIndex = servoIndex;
    recordedStep.value = value;
    recordedStep.delayInStep = currentTime - previousTimeInMilli;
    recordedSteps.push_back(recordedStep);
    previousTimeInMilli = currentTime;
  }
  servoPins[servoIndex].servo.write(value);
}

void playRecordedRobotArmSteps() {
  if (recordedSteps.size() == 0) {
    return;
  }
  //This is to move servo to initial position slowly. First 4 steps are initial position
  for (int i = 0; i < 4 && playRecordedSteps; i++) {
    RecordedStep &recordedStep = recordedSteps[i];
    int currentServoPosition = servoPins[recordedStep.servoIndex].servo.read();
    while (currentServoPosition != recordedStep.value && playRecordedSteps) {
      currentServoPosition = (currentServoPosition > recordedStep.value ? currentServoPosition - 1 : currentServoPosition + 1);
      servoPins[recordedStep.servoIndex].servo.write(currentServoPosition);
      wsRobotArmInput.textAll(servoPins[recordedStep.servoIndex].servoName + "," + currentServoPosition);
      delay(50);
    }
  }
  delay(2000);  // Delay before starting the actual steps.

  for (int i = 4; i < recordedSteps.size() && playRecordedSteps; i++) {
    RecordedStep &recordedStep = recordedSteps[i];
    delay(recordedStep.delayInStep);
    servoPins[recordedStep.servoIndex].servo.write(recordedStep.value);
    wsRobotArmInput.textAll(servoPins[recordedStep.servoIndex].servoName + "," + recordedStep.value);
  }
}

void setUpPinModes() {
  //  pinMode(motorPins[0].pinIN2, FUNCTION_3);
  // pinMode(motorPins[1].pinIN1, FUNCTION_3);


  for (int i = 0; i < motorPins.size(); i++) {
    pinMode(motorPins[i].pinEn, OUTPUT);
    pinMode(motorPins[i].pinIN1, OUTPUT);
    pinMode(motorPins[i].pinIN2, OUTPUT);

    analogWrite(motorPins[i].pinEn, 50);
  }
  pinMode(motorPins[1].pinIN1, OUTPUT);
  moveCar(STOP);

  for (int i = 0; i < servoPins.size(); i++) {
    servoPins[i].servo.attach(servoPins[i].servoPin , 500 , 2400);
    servoPins[i].servo.write(servoPins[i].initialPosition);
  }
}


void setup(void) {
  //  pinMode(1,  FUNCTION_3);
  // pinMode(3,  FUNCTION_3);
  setUpPinModes();
  // Serial.begin(115200);
  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);

  server.on("/", HTTP_GET, handleRoot);
  server.onNotFound(handleNotFound);

  wsRobotArmInput.onEvent(onRobotArmInputWebSocketEvent);
  server.addHandler(&wsRobotArmInput);


  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  wsRobotArmInput.cleanupClients();
  // wsCarInput.cleanupClients();
  if (playRecordedSteps) {
    playRecordedRobotArmSteps();
  }
}
